{"componentChunkName":"component---src-templates-blog-post-js","path":"/proving-the-concept/","result":{"data":{"site":{"siteMetadata":{"title":"Liam Hockley"}},"markdownRemark":{"id":"6209a96a-f107-5440-849e-e8f1ea1505bc","excerpt":"Why? A proof of concept can help you investigate potential improvements without\ncommitting to a fully fleshed-out solution. You can quickly discover potential…","html":"<h2>Why?</h2>\n<p>A proof of concept can help you investigate potential improvements without\ncommitting to a fully fleshed-out solution. You can quickly discover potential\nissues and pitfalls early in the development cycle.</p>\n<p>Another purpose of a proof of concept is to illustrate a solution in\nsimplified form. As such, it can be a great tool to show non-tech\nstakeholders the “basic idea.”</p>\n<h2>How?</h2>\n<p>First up. A culture of innovation is needed, with ample time available to explore\nissues, learn what needs improvement, and creatively brainstorm. Issues in code\nand architecture should be well known and open for improvement.</p>\n<p>Good examples of when a proof of concept can be useful is when unit testing a\nlegacy system. I have been working on this recently. We discovered that our\ntest coverage is almost nonexistent. In learning where to start, I began\ndigging into our existing setup to find that we have a broken implementation of\nPHPUnit, where tests are automatically generated that:</p>\n<p>(a) Don’t test anything\n(b) Fail.</p>\n<p>My proof of concept (without sharing proprietary code) began with a simple test\ncase, which tests the functionality of a class.</p>\n<p>Something along these lines (completely made up code):</p>\n<p><strong>Test Subject</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token function\">GetData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Sometimes you need to modify the code and that's okay. This constructor is</span>\n  <span class=\"token comment\">// written to allow injection of test data, instead of having to fetch data</span>\n  <span class=\"token comment\">// from an external data source.</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token operator\">=</span><span class=\"token constant\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">data</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$data</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$data</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FetchFromExternalDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">data</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token operator\">...</span>\n\n    <span class=\"token comment\">// The init method is running a sort. That is easily testable functionality.</span>\n    <span class=\"token function\">usort</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token variable\">$a</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"id\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=></span> <span class=\"token variable\">$b</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"id\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token operator\">...</span>\n\n    <span class=\"token comment\">// Oh look! We can test that the returned data is wrapped in the expected </span>\n    <span class=\"token comment\">// object.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataObject</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Test Case</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token function\">GetTests</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">data</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">[</span>\n        <span class=\"token string double-quoted-string\">\"id\"</span> <span class=\"token operator\">=></span> <span class=\"token string double-quoted-string\">\"2\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string double-quoted-string\">\"name\"</span> <span class=\"token operator\">=></span> <span class=\"token string double-quoted-string\">\"Item 2\"</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">[</span>\n        <span class=\"token string double-quoted-string\">\"id\"</span> <span class=\"token operator\">=></span> <span class=\"token string double-quoted-string\">\"1\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string double-quoted-string\">\"name\"</span> <span class=\"token operator\">=></span> <span class=\"token string double-quoted-string\">\"Item 1\"</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">unset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">testResultIsInstanceOfDataObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Create a test object with mocked data passed to the constructor</span>\n    <span class=\"token variable\">$get</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Get</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$get</span><span class=\"token operator\">-></span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">assertInstanceOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name static-context\">DataObject</span><span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$result</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">testResultsAreSortedDescending</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$get</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Get</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$get</span><span class=\"token operator\">-></span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$result</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-></span><span class=\"token property\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The example above, while semi-fictional, should illustrate how you can openly\nbrainstorm and create a tangible example. There would likely be a lot of\n“follow-up” as problems and shortcomings arise. But that is precisely the point.\nProblems are discovered early in the development cycle. That way, you are\nbetter prepared to write more maintainable solutions.</p>\n<h2>What to Avoid?</h2>\n<p>A proof of concept should be as simplified a case as possible. It ought to be\nable to demonstrate the purpose and benefits, but not be overly concerned with\nedge cases.</p>\n<p>A proof of concept should not be considered an “endgame” and should be open\nto significant change if/when the implementation of the solution happens.</p>","frontmatter":{"title":"Proving The Concept","date":"10 July, 2021","description":"When it comes to software engineering, a good proof of concept can  go a long way in illustrating solutions. But what makes a good proof of concept?  What should we consider? Let's dive into a more philosophical topic and discuss."}},"previous":{"fields":{"slug":"/tests-one-week-later/"},"frontmatter":{"title":"Tests: One Week Later"}},"next":null},"pageContext":{"id":"6209a96a-f107-5440-849e-e8f1ea1505bc","previousPostId":"ce0d55fe-41c0-581d-a372-af32cac80aef","nextPostId":null}},"staticQueryHashes":["3000541721","3859007307"]}