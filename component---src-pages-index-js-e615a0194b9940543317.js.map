{"version":3,"sources":["webpack://liamhockley-me/./src/components/bio.js","webpack://liamhockley-me/./src/pages/index.js"],"names":["className","S","alt","src","style","height","width","imgStyle","objectFit","quality","data","location","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","nodes","length","listStyle","map","post","frontmatter","fields","slug","key","itemScope","itemType","Link","to","itemProp","date","dangerouslySetInnerHTML","__html","description","excerpt"],"mappings":"yjCAiCA,EA9BY,WACV,OACE,yBAAOA,UAAU,uDACf,gBAAC,EAAAC,EAAD,CACED,UAAU,SACVE,IAAI,oBACJC,IAAI,uBACJC,MAAO,CAAEC,OAAQ,OAAQC,MAAO,QAChCC,SAAU,CAAEC,UAAW,WACvBH,OAAQ,IACRC,MAAO,IACPG,QAAS,GARX,sBAeA,uBAAKT,UAAU,wBACb,4FACA,4N,oBC6CR,EA7DkB,SAAC,GAAwB,IAAD,EAArBU,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACnBC,GAAY,UAAAF,EAAKG,KAAKC,oBAAV,eAAwBC,QAAxB,QACZC,EAAQN,EAAKO,kBAAkBC,MAErC,OAAqB,IAAjBF,EAAMG,OAEN,gBAAC,IAAD,CAAQR,SAAUA,EAAUI,MAAOH,GACjC,gBAAC,IAAD,CAAKG,MAAM,cACX,gBAAC,EAAD,MACA,kDAQJ,gBAAC,IAAD,CAAQJ,SAAUA,EAAUI,MAAOH,GACjC,gBAAC,IAAD,CAAKG,MAAM,cACX,gBAAC,EAAD,MACA,sBAAIX,MAAO,CAAEgB,UAAU,SACpBJ,EAAMK,KAAI,SAAAC,GACT,IAAMP,EAAQO,EAAKC,YAAYR,OAASO,EAAKE,OAAOC,KAEpD,OACE,sBAAIC,IAAKJ,EAAKE,OAAOC,MACnB,2BACEzB,UAAU,iBACV2B,WAAS,EACTC,SAAS,6BAET,0BAAQ5B,UAAU,QAChB,sBAAIA,UAAU,mDACZ,gBAAC,EAAA6B,KAAD,CAAMC,GAAIR,EAAKE,OAAOC,KAAMM,SAAS,OACnC,wBAAMA,SAAS,YAAYhB,KAG/B,uBAAKf,UAAU,WAAWsB,EAAKC,YAAYS,OAE7C,+BACE,qBACEC,wBAAyB,CACvBC,OAAQZ,EAAKC,YAAYY,aAAeb,EAAKc,SAE/CL,SAAS,iBAGb,0BAAQ/B,UAAU,QACd,gBAAC,EAAA6B,KAAD,CAAMC,GAAIR,EAAKE,OAAOC,KAAMM,SAAS,OACnC,wBAAM/B,UAAU,2BAAhB","file":"component---src-pages-index-js-e615a0194b9940543317.js","sourcesContent":["import * as React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  return (\n    <aside className=\"flex p-2 m-2 ml-0 pl-0 pt-0 mt-0 gap-4 items-center\">\n      <StaticImage\n        className=\"flex-1\"\n        alt=\"My Profile Avatar\" \n        src=\"../images/avatar.png\"\n        style={{ height: \"100%\", width: \"100%\"}}\n        imgStyle={{ objectFit: \"contain\" }}\n        height={100}\n        width={100}\n        quality={95}\n      />\n      {/**\n       * The Bio content here is, simple, static HTML instad of pulling from \n       * some config, meta-data, etc. Sometimes it's really not worth trying to \n       * be overly \"clever\", when a simple solution is acceptable.\n       */}\n      <div className=\"flex-5 text-gray-500\">\n        <p>Hello, I am a Software Engineer focused of Ed Tech and the WWW.</p>\n        <p>\n          My primary expertise includes modern PHP and JavaScript, along with \n          numerous tools and technologies that saturate the world of Web \n          Development. I hope you find my nerdy musings insightful.\n        </p>\n      </div>\n    </aside>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <Seo title=\"All posts\" />\n        <Bio />\n        <p>\n          No blog posts found.\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo title=\"All posts\" />\n      <Bio />\n      <ol style={{ listStyle: `none` }}>\n        {posts.map(post => {\n          const title = post.frontmatter.title || post.fields.slug\n\n          return (\n            <li key={post.fields.slug}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header className=\"mb-2\">\n                  <h2 className=\"text-2xl font-bold uppercase text-blue-400 mb-1\">\n                    <Link to={post.fields.slug} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                  <div className=\"text-sm\">{post.frontmatter.date}</div>\n                </header>\n                <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: post.frontmatter.description || post.excerpt,\n                    }}\n                    itemProp=\"description\"\n                  />\n                </section>\n                <footer className=\"pt-1\">\n                    <Link to={post.fields.slug} itemProp=\"url\">\n                      <span className=\"text-blue-400 font-bold\" >[ ... ]</span>\n                    </Link>\n                </footer>\n              </article>\n            </li>\n          )\n        })}\n      </ol>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"DD MMMM, YYYY\")\n          title\n          description\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}