<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Liam Hockley]]></title><description><![CDATA[Thoughts and ideas from the mind of a JS and PHP expert]]></description><link>https://liamhockley.me</link><generator>GatsbyJS</generator><lastBuildDate>Wed, 23 Jun 2021 03:36:09 GMT</lastBuildDate><item><title><![CDATA[Let's Start Testing]]></title><description><![CDATA[The Setup To start with, I would like to applaud Gatsby for their excellent
documentation on Unit Testing. It is one thing to include step…]]></description><link>https://liamhockley.me/lets-start-testing/</link><guid isPermaLink="false">https://liamhockley.me/lets-start-testing/</guid><pubDate>Mon, 21 Jun 2021 03:48:29 GMT</pubDate><content:encoded>&lt;h2&gt;The Setup&lt;/h2&gt;
&lt;p&gt;To start with, I would like to applaud Gatsby for their excellent
&lt;a href=&quot;https://www.gatsbyjs.com/docs/how-to/testing/unit-testing/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;documentation&lt;/a&gt; on Unit Testing. It is one thing to include step-by-step that works flawlessly, but it is even more helpful when the documentation outlines the &lt;em&gt;why&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;My setup for unit testing here follows all the recommendations found in the documentation above, as I am a huge proponent of adhering to community standards when they are available. We can probably delve more into that topic in a future post.&lt;/p&gt;
&lt;h2&gt;The Test&lt;/h2&gt;
&lt;p&gt;I modified my first test based on the example in the Gatsby documentation. The documentation outlines how to test a Header component, but I have no such component (more on that in a minute).&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; renderer &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react-test-renderer&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Bio &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;../bio&quot;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Bio&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;renders correctly&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; tree &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; renderer
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Bio &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toJSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tree&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toMatchSnapshot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This test simply renders my Bio component, creates a snapshot of it, and then all future tests will ensure that this snapshot will be how the component renders. This initial Regression Test is valuable, as it will ensure that the static side effects of this component will render as expected in the future.&lt;/p&gt;
&lt;p&gt;This test could be modified to only look at the text content, which would make it less brittle. Currently, the snapshot contains the entire DOM structure, along with CSS class. I am not comfortable with this because it is likely I will make adjustments and tweaks to my Tailwind CSS classes in the future.&lt;/p&gt;
&lt;p&gt;For now, simply introducing this test has helped illuminate some issues with my code structure.&lt;/p&gt;
&lt;h2&gt;Future Implications&lt;/h2&gt;
&lt;p&gt;It is immediately clear to me after implementing this first test, that my layout is not atomic enough. I have a total of 3 components, one of which is a single component amalgamation of my layout.&lt;/p&gt;
&lt;p&gt;As I build out this test suite, I should at least factor my layout into encapsulated Head, Footer, and Nav components.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[A New Start... Again]]></title><description><![CDATA[What’s Gone? No more Jenkins template-based project. While I do have a reasonable mastery of
Ruby (in particular Rails), I wanted to write…]]></description><link>https://liamhockley.me/a-new-start-again/</link><guid isPermaLink="false">https://liamhockley.me/a-new-start-again/</guid><pubDate>Sat, 19 Jun 2021 06:15:04 GMT</pubDate><content:encoded>&lt;h2&gt;What’s Gone?&lt;/h2&gt;
&lt;p&gt;No more Jenkins template-based project. While I do have a reasonable mastery of
Ruby (in particular Rails), I wanted to write something based on tools that I
personally prefer (JS, React).&lt;/p&gt;
&lt;p&gt;I am no longer deep in a job search, so gone are the portfolio and resume links
…for now. I want to focus my efforts on building a single feature first, a Blog,
and committing to it.&lt;/p&gt;
&lt;h2&gt;What’s New?&lt;/h2&gt;
&lt;p&gt;When I rebuilt this website I wanted to make sure it gave me a platform to truly
display my growing mastery of modern JS, with related tools and technologies.&lt;/p&gt;
&lt;p&gt;I wanted to build something statically generated and opted to go with Gatsby for
the task, due to it’s vibrant plugin market and good support for markdown parsing.&lt;/p&gt;
&lt;p&gt;I had a lot of fun in this process. Much like with my previous Jenkins project,
all my blog posts are simply markdown files. This time, however, I decided I wanted
to write a script to quickly generate a new blog post boilerplate.&lt;/p&gt;
&lt;h2&gt;What’s Next?&lt;/h2&gt;
&lt;p&gt;Next up? Well. This is just, essentially, an “MVP”. I want to add new pages,
features, and continue to polish the layout and styling. I do, however, want the
design to remain minimal. That’s my style, my brand.&lt;/p&gt;
&lt;p&gt;Another thing I want to do here, is to finally dive into Unit Testing with Jest.
At the moment I have a lot to learn in terms of how to write good unit tests,
in particular how to approach implementation of testing to an existing system.&lt;/p&gt;
&lt;p&gt;Watch this space as there will probably be a blog post (or a few) which talk
about my adventures in Jest, etc.&lt;/p&gt;</content:encoded></item></channel></rss>